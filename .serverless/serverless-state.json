{
  "service": {
    "service": "ecomm-lambda",
    "serviceObject": {
      "name": "ecomm-lambda"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "region": "eu-west-3",
      "runtime": "provided",
      "vpc": {
        "securityGroupIds": [
          "sg-05fb0ef37d06768e0"
        ],
        "subnetIds": [
          "subnet-0796eb32ebc964aab"
        ]
      },
      "environment": {
        "APP_ENV": "production",
        "VIEW_COMPILED_PATH": "/tmp/storage/framework/views",
        "LOG_CHANNEL": "stderr",
        "SESSION_DRIVER": "cookie",
        "FILESYSTEM_DRIVER": "s3",
        "FILESYSTEM_PUBLIC": "s3",
        "DB_CONNECTION": "mysql",
        "DB_HOST": "preproduction.c8fzfidnwmue.eu-west-3.rds.amazonaws.com",
        "DB_DATABASE": "webid2",
        "DB_USERNAME": "admin",
        "DB_PASSWORD": "jAghmKUOUvFrQ2ODhX2lpNwnCnwLtvZ7",
        "AWS_BUCKET": {
          "Ref": "Storage"
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": "s3:*",
          "Resource": [
            {
              "Fn::Join": [
                "",
                [
                  "arn:aws:s3:::",
                  {
                    "Ref": "Storage"
                  }
                ]
              ]
            },
            {
              "Fn::Join": [
                "",
                [
                  "arn:aws:s3:::",
                  {
                    "Ref": "Storage"
                  },
                  "/*"
                ]
              ]
            }
          ]
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "WebsiteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ecomm-lambda-dev-website"
            }
          },
          "ArtisanLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ecomm-lambda-dev-artisan"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "ecomm-lambda",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ecomm-lambda-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ecomm-lambda-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ecomm-lambda",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "WebsiteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ecomm-lambda/dev/1572478201287-2019-10-30T23:30:01.287Z/ecomm-lambda.zip"
              },
              "FunctionName": "ecomm-lambda-dev-website",
              "Handler": "public/index.php",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "provided",
              "Timeout": 28,
              "Environment": {
                "Variables": {
                  "APP_ENV": "production",
                  "VIEW_COMPILED_PATH": "/tmp/storage/framework/views",
                  "LOG_CHANNEL": "stderr",
                  "SESSION_DRIVER": "cookie",
                  "FILESYSTEM_DRIVER": "s3",
                  "FILESYSTEM_PUBLIC": "s3",
                  "DB_CONNECTION": "mysql",
                  "DB_HOST": "preproduction.c8fzfidnwmue.eu-west-3.rds.amazonaws.com",
                  "DB_DATABASE": "webid2",
                  "DB_USERNAME": "admin",
                  "DB_PASSWORD": "jAghmKUOUvFrQ2ODhX2lpNwnCnwLtvZ7",
                  "AWS_BUCKET": {
                    "Ref": "Storage"
                  }
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-05fb0ef37d06768e0"
                ],
                "SubnetIds": [
                  "subnet-0796eb32ebc964aab"
                ]
              },
              "Layers": [
                "arn:aws:lambda:eu-west-3:209497400698:layer:php-73-fpm:13"
              ]
            },
            "DependsOn": [
              "WebsiteLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "WebsiteLambdaVersionj0Ce6rxmraFvvpe2rSpuf3BSVwbK3hBpNrcbllj1s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WebsiteLambdaFunction"
              },
              "CodeSha256": "q3J6q88hq8EqoDi4kPGmAhSlHDZL8xwdzEpPjH44ja0="
            }
          },
          "ArtisanLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ecomm-lambda/dev/1572478201287-2019-10-30T23:30:01.287Z/ecomm-lambda.zip"
              },
              "FunctionName": "ecomm-lambda-dev-artisan",
              "Handler": "artisan",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "provided",
              "Timeout": 120,
              "Environment": {
                "Variables": {
                  "APP_ENV": "production",
                  "VIEW_COMPILED_PATH": "/tmp/storage/framework/views",
                  "LOG_CHANNEL": "stderr",
                  "SESSION_DRIVER": "cookie",
                  "FILESYSTEM_DRIVER": "s3",
                  "FILESYSTEM_PUBLIC": "s3",
                  "DB_CONNECTION": "mysql",
                  "DB_HOST": "preproduction.c8fzfidnwmue.eu-west-3.rds.amazonaws.com",
                  "DB_DATABASE": "webid2",
                  "DB_USERNAME": "admin",
                  "DB_PASSWORD": "jAghmKUOUvFrQ2ODhX2lpNwnCnwLtvZ7",
                  "AWS_BUCKET": {
                    "Ref": "Storage"
                  }
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-05fb0ef37d06768e0"
                ],
                "SubnetIds": [
                  "subnet-0796eb32ebc964aab"
                ]
              },
              "Layers": [
                "arn:aws:lambda:eu-west-3:209497400698:layer:php-73:13",
                "arn:aws:lambda:eu-west-3:209497400698:layer:console:13"
              ]
            },
            "DependsOn": [
              "ArtisanLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ArtisanLambdaVersionqAmuN0N0eeen0gXmmKneZexjQ9jCu0HUCR46cJyzU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ArtisanLambdaFunction"
              },
              "CodeSha256": "q3J6q88hq8EqoDi4kPGmAhSlHDZL8xwdzEpPjH44ja0="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-ecomm-lambda",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebsiteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebsiteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1572478161802": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "WebsiteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WebsiteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "Storage": {
            "Type": "AWS::S3::Bucket"
          },
          "StorageBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "Storage"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "Storage"
                          },
                          "/*"
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          },
          "Assets": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "assets.bagisto.com",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "AssetsBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "Assets"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::assets.bagisto.com/*"
                  }
                ]
              }
            }
          },
          "WebsiteCDN": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
              "DistributionConfig": {
                "Enabled": true,
                "PriceClass": "PriceClass_100",
                "HttpVersion": "http2",
                "Origins": [
                  {
                    "Id": "Website",
                    "DomainName": {
                      "Fn::Sub": "${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
                    },
                    "OriginPath": "/dev",
                    "CustomOriginConfig": {
                      "OriginProtocolPolicy": "https-only"
                    }
                  },
                  {
                    "Id": "Assets",
                    "DomainName": {
                      "Fn::Sub": "${Assets}.s3.amazonaws.com"
                    },
                    "CustomOriginConfig": {
                      "OriginProtocolPolicy": "http-only"
                    }
                  }
                ],
                "DefaultCacheBehavior": {
                  "AllowedMethods": [
                    "GET",
                    "HEAD",
                    "OPTIONS",
                    "PUT",
                    "POST",
                    "PATCH",
                    "DELETE"
                  ],
                  "TargetOriginId": "Website",
                  "DefaultTTL": 0,
                  "MinTTL": 0,
                  "MaxTTL": 0,
                  "ForwardedValues": {
                    "QueryString": true,
                    "Cookies": {
                      "Forward": "all"
                    },
                    "Headers": [
                      "Accept",
                      "Accept-Language",
                      "Origin",
                      "Referer"
                    ]
                  },
                  "ViewerProtocolPolicy": "redirect-to-https"
                },
                "CacheBehaviors": [
                  {
                    "PathPattern": "/themes/*",
                    "TargetOriginId": "Assets",
                    "AllowedMethods": [
                      "GET",
                      "HEAD"
                    ],
                    "ForwardedValues": {
                      "QueryString": "false",
                      "Cookies": {
                        "Forward": "none"
                      }
                    },
                    "ViewerProtocolPolicy": "redirect-to-https",
                    "Compress": true
                  },
                  {
                    "PathPattern": "/installer/*",
                    "TargetOriginId": "Assets",
                    "AllowedMethods": [
                      "GET",
                      "HEAD"
                    ],
                    "ForwardedValues": {
                      "QueryString": "false",
                      "Cookies": {
                        "Forward": "none"
                      }
                    },
                    "ViewerProtocolPolicy": "redirect-to-https",
                    "Compress": true
                  },
                  {
                    "PathPattern": "/vendor/*",
                    "TargetOriginId": "Assets",
                    "AllowedMethods": [
                      "GET",
                      "HEAD"
                    ],
                    "ForwardedValues": {
                      "QueryString": "false",
                      "Cookies": {
                        "Forward": "none"
                      }
                    },
                    "ViewerProtocolPolicy": "redirect-to-https",
                    "Compress": true
                  }
                ],
                "CustomErrorResponses": [
                  {
                    "ErrorCode": 500,
                    "ErrorCachingMinTTL": 0
                  },
                  {
                    "ErrorCode": 504,
                    "ErrorCachingMinTTL": 0
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "WebsiteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WebsiteLambdaVersionj0Ce6rxmraFvvpe2rSpuf3BSVwbK3hBpNrcbllj1s"
            }
          },
          "ArtisanLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ArtisanLambdaVersionqAmuN0N0eeen0gXmmKneZexjQ9jCu0HUCR46cJyzU"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "plugins": [
      "./vendor/bref/bref",
      "serverless-pseudo-parameters"
    ],
    "pluginsData": {},
    "functions": {
      "website": {
        "handler": "public/index.php",
        "timeout": 28,
        "layers": [
          "arn:aws:lambda:eu-west-3:209497400698:layer:php-73-fpm:13"
        ],
        "events": [
          {
            "http": "ANY /"
          },
          {
            "http": "ANY /{proxy+}"
          }
        ],
        "name": "ecomm-lambda-dev-website",
        "package": {},
        "memory": 1024,
        "runtime": "provided",
        "vpc": {}
      },
      "artisan": {
        "handler": "artisan",
        "timeout": 120,
        "layers": [
          "arn:aws:lambda:eu-west-3:209497400698:layer:php-73:13",
          "arn:aws:lambda:eu-west-3:209497400698:layer:console:13"
        ],
        "events": [],
        "name": "ecomm-lambda-dev-artisan",
        "package": {},
        "memory": 1024,
        "runtime": "provided",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "Storage": {
          "Type": "AWS::S3::Bucket"
        },
        "StorageBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "Storage"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "Storage"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        },
        "Assets": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "assets.bagisto.com",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ]
                }
              ]
            }
          }
        },
        "AssetsBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "Assets"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::assets.bagisto.com/*"
                }
              ]
            }
          }
        },
        "WebsiteCDN": {
          "Type": "AWS::CloudFront::Distribution",
          "Properties": {
            "DistributionConfig": {
              "Enabled": true,
              "PriceClass": "PriceClass_100",
              "HttpVersion": "http2",
              "Origins": [
                {
                  "Id": "Website",
                  "DomainName": "#{ApiGatewayRestApi}.execute-api.#{AWS::Region}.amazonaws.com",
                  "OriginPath": "/dev",
                  "CustomOriginConfig": {
                    "OriginProtocolPolicy": "https-only"
                  }
                },
                {
                  "Id": "Assets",
                  "DomainName": "#{Assets}.s3.amazonaws.com",
                  "CustomOriginConfig": {
                    "OriginProtocolPolicy": "http-only"
                  }
                }
              ],
              "DefaultCacheBehavior": {
                "AllowedMethods": [
                  "GET",
                  "HEAD",
                  "OPTIONS",
                  "PUT",
                  "POST",
                  "PATCH",
                  "DELETE"
                ],
                "TargetOriginId": "Website",
                "DefaultTTL": 0,
                "MinTTL": 0,
                "MaxTTL": 0,
                "ForwardedValues": {
                  "QueryString": true,
                  "Cookies": {
                    "Forward": "all"
                  },
                  "Headers": [
                    "Accept",
                    "Accept-Language",
                    "Origin",
                    "Referer"
                  ]
                },
                "ViewerProtocolPolicy": "redirect-to-https"
              },
              "CacheBehaviors": [
                {
                  "PathPattern": "/themes/*",
                  "TargetOriginId": "Assets",
                  "AllowedMethods": [
                    "GET",
                    "HEAD"
                  ],
                  "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                      "Forward": "none"
                    }
                  },
                  "ViewerProtocolPolicy": "redirect-to-https",
                  "Compress": true
                },
                {
                  "PathPattern": "/installer/*",
                  "TargetOriginId": "Assets",
                  "AllowedMethods": [
                    "GET",
                    "HEAD"
                  ],
                  "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                      "Forward": "none"
                    }
                  },
                  "ViewerProtocolPolicy": "redirect-to-https",
                  "Compress": true
                },
                {
                  "PathPattern": "/vendor/*",
                  "TargetOriginId": "Assets",
                  "AllowedMethods": [
                    "GET",
                    "HEAD"
                  ],
                  "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                      "Forward": "none"
                    }
                  },
                  "ViewerProtocolPolicy": "redirect-to-https",
                  "Compress": true
                }
              ],
              "CustomErrorResponses": [
                {
                  "ErrorCode": 500,
                  "ErrorCachingMinTTL": 0
                },
                {
                  "ErrorCode": 504,
                  "ErrorCachingMinTTL": 0
                }
              ]
            }
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/Users/vincent.cau/Library/Mobile Documents/com~apple~CloudDocs/solar swiss/ecommerce/myshop/.serverless/ecomm-lambda.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/ecomm-lambda/dev/1572478201287-2019-10-30T23:30:01.287Z",
    "artifact": "ecomm-lambda.zip"
  }
}